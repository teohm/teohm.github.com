<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2013-04-18T09:32:01+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef cookbooks for busy Ruby developers]]></title>
    <link href="http://teohm.github.com/blog/2013/04/17/chef-cookbooks-for-busy-ruby-developers/"/>
    <updated>2013-04-17T23:06:00+08:00</updated>
    <id>http://teohm.github.com/blog/2013/04/17/chef-cookbooks-for-busy-ruby-developers</id>
    <content type="html"><![CDATA[<p>Have you ever <strong>setup a Rails production environment from scratch, by
hand</strong>? If you had, I share your pain every time when a new project
started.</p>

<p>The process is often repetitive. To me, it seems to be a waste to do it
manually every time. It also consumes time and attention. It would be
great if I could spend them on tasks that bring more values to clients.</p>

<p>To minimize such waste, I have written two Chef cookbooks to <strong>automate
the process</strong>:</p>

<ul>
<li><a href="https://github.com/teohm/rackbox-cookbook"><strong>rackbox</strong></a>  - to provision <strong>rack-based web server</strong> (Nginx as front server, Unicorn and Passenger as upstream app servers, <code>rbenv</code> as ruby version manager).</li>
<li><a href="https://github.com/teohm/databox-cookbook"><strong>databox</strong></a> - to provision <strong>database server</strong> (supports MySQL and PostgreSQL).</li>
</ul>


<h2>Getting started</h2>

<p>In this post, I will show you a <strong>step-by-step guide</strong> on how to use the
cookbooks together with
<a href="https://github.com/matschaffer/knife-solo"><code>knife-solo</code></a> to provision a
remote server in 4 steps:</p>

<ol>
<li>setup Chef Solo environment</li>
<li>modify config file</li>
<li>provision remote server</li>
<li>tweak Capistrano <code>deploy.rb</code></li>
</ol>


<p>A working example in also available at
<a href="https://github.com/teohm/kitchen-example">teohm/kitchen-example</a>.</p>

<h2>1. Setup Chef Solo environment</h2>

<ul>
<li>Install Chef Solo tools on local machine.</li>
<li>Download Chef cookbooks to local machine.</li>
<li>Install <code>chef-solo</code> on remote server.</li>
</ul>


<h3>Install Chef Solo tools</h3>

<p>Let's create a new directory,</p>

<p><code>
mkdir chef-kitchen
cd chef-kitchen
</code></p>

<p>and a <code>Gemfile</code>.</p>

<p>```
source "https://rubygems.org"</p>

<p>gem "knife-solo", ">= 0.3.0pre3"
gem "berkshelf"
```</p>

<p>I recommend <code>knife-solo &gt;= 0.3</code> as it includes a few <a href="https://github.com/matschaffer/knife-solo/blob/master/CHANGELOG.md#changes-and-new-features">major fixes and
improvements</a>.</p>

<p>Now, install the ruby gems.</p>

<p><code>
bundle install
</code></p>

<p>Finally, setup a kitchen directory structure with <code>knife-solo</code>.</p>

<p><code>
bundle exec knife solo init .
</code></p>

<h3>Download Chef cookbooks</h3>

<p>I use <a href="http://berkshelf.com/">Berkshelf</a> to manage cookbooks. So we need a <code>Berksfile</code>,</p>

<p>```
site :opscode</p>

<p>cookbook "runit", ">= 1.1.2"  # HACK: force-use this version
cookbook "databox"
cookbook "rackbox"
```</p>

<p>(I added a hack here to force <code>berkshelf</code> to use <code>runit 1.1.2</code> required
by <code>rackbox</code>. Still looking for a better solution.)</p>

<p>We can now download cookbooks with <code>berks install</code>.</p>

<p><code>
bundle exec berks install --path cookbooks/
</code></p>

<h3>Install <code>chef-solo</code> on remote server</h3>

<p><code>
bundle exec knife solo prepare testbox
</code></p>

<h2>2. Customize config file</h2>

<ul>
<li>Download config example</li>
<li>Customize config file</li>
</ul>


<h3>Download config example</h3>

<p><code>
curl https://raw.github.com/teohm/kitchen-example/master/nodes/host.json.example --output nodes/testbox.json
</code></p>

<h3>Modify config file (JSON)</h3>

<p>The config file starts with a <code>run_list</code>. You specify a list of cookbook
recipes here. Chef will run them in the same order in this list.</p>

<p>It is followed by cookbook attributes. You can modify these attributes.
A full reference of attributes are described in each cookbook's README
(see <a href="https://github.com/teohm/appbox-cookbook#attributes">appbox</a>,
<a href="https://github.com/teohm/databox-cookbook#attributes">databox</a>,
<a href="https://github.com/teohm/rackbox-cookbook#attributes">rackbox</a>).</p>

<p>```
{
  "run_list": [</p>

<pre><code>"databox",
"rackbox"
</code></pre>

<p>  ],
  "appbox": {</p>

<pre><code>"deploy_keys": ["ssh-rsa 5bnmu23890fghghjk"],
"admin_keys": ["ssh-rsa 456789fghjkvbn567"]
</code></pre>

<p>  },
  "databox": {</p>

<pre><code>"db_root_password": "welcome!",
"databases": {
  "mysql": [
    { "username": "app1",
      "password": "app1",
      "database_name": "app1_production" }
  ],
  "postgresql": [
    { "username": "app2",
      "password": "app2",
      "database_name": "app2_production" }
  ]
}
</code></pre>

<p>  },
  "rackbox": {</p>

<pre><code>"ruby": {
  "versions": ["1.9.3-p385", "1.9.2-p320"],
  "global_version": "1.9.3-p385"
},
"apps": {
  "unicorn": [
    { "appname": "app1",
      "hostname": "app1.test.com" }
  ],
  "passenger": [
    { "appname": "app2",
      "hostname": "app2.test.com" }
  ]
}
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>3. Provision remote server</h2>

<p><code>
bundle exec knife solo cook testbox
</code></p>

<p>It uploads the kitchen directory and runs <code>chef-solo</code> on the remote
server. Chef-solo will then takeover and execute the run list to setup
everything.</p>

<h3>What do we get at this point?</h3>

<p>Basically, it's done!</p>

<p>We have a <strong>full-stack, rack-based server</strong> with:</p>

<ul>
<li>3 user accounts (deploy, devops, apps)</li>
<li><code>rbenv</code> as ruby version manager</li>
<li><code>nginx</code> as front-server</li>
<li><code>unicorn</code>, <code>passenger-standalone</code> as upstream app servers, managed by <code>runit</code></li>
<li><code>postgresql</code>, <code>mysql</code> installed and databases created</li>
<li>all apps will be stored in <code>/home/apps/</code></li>
</ul>


<h2>4. Tweak Capistrano deploy.rb</h2>

<p>Now, it's ready to deploy a Rack-backed app to the remote server!</p>

<p>I have two example Rails apps available on Github:</p>

<ul>
<li><a href="https://github.com/teohm/sample-app1">teohm/sample-app1</a> runs on unicorn,</li>
<li><a href="https://github.com/teohm/sample-app2">teohm/sample-app2</a> runs on passenger-standalone.</li>
</ul>


<p>There are a few <strong>minor tweaks required in Capistrano <code>deploy.rb</code></strong>, as listed below.</p>

<p>I will explain the tweaks in details next time. Meanwhile, check out the complete working examples at: <a href="https://github.com/teohm/sample-app1/blob/master/config/deploy.rb">app1/config/deploy.rb</a> and <a href="https://github.com/teohm/sample-app2/blob/master/config/deploy.rb">app2/config/deploy.rb</a></p>

<h3>Login as <code>deploy</code> user</h3>

<p><code>
set :user, "deploy"
</code></p>

<h3>Deploy to <code>/home/apps</code></h3>

<p><code>
set :deploy_to, "/home/apps/#{application}"
</code></p>

<h3>Load <code>rbenv</code> in Capistrano</h3>

<p><code>
default_run_options[:shell] = '/bin/bash --login'
</code></p>

<h3>Run bundler with <code>--binstubs</code></h3>

<p><code>
require 'bundler/capistrano'
set :bundle_flags, "--deployment --binstubs"
set :bundle_without, [:test, :development, :deploy]
</code></p>

<h3>Restart app with <code>runit sv</code></h3>

<p>```
namespace :deploy do
  task :start do</p>

<pre><code>run "sudo sv up app1"
</code></pre>

<p>  end
  task :stop do</p>

<pre><code>run "sudo sv down app1"
</code></pre>

<p>  end
  task :restart, :roles => :app, :except => { :no_release => true } do</p>

<pre><code>run "sudo sv restart app1"
</code></pre>

<p>  end
end</p>

<p>```</p>

<h2>Feedback</h2>

<p>If you are interested on using the cookbooks, or have an idea/feedback/question about this topic, feel free to drop me (<a href="http://twitter.com/teohm">@teohm</a>) a message. Pull requests and issue reports are definitely welcomed!</p>
]]></content>
  </entry>
  
</feed>
