<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2012-10-21T15:21:59+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac Tips: Turn on remote login (SSH server)]]></title>
    <link href="http://teohm.github.com/blog/2012/04/07/mac-tips-turn-on-remote-login-ssh-server/"/>
    <updated>2012-04-07T15:12:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/04/07/mac-tips-turn-on-remote-login-ssh-server</id>
    <content type="html"><![CDATA[<p>Enable SSH server on Mac OSX is surprisingly easy. Open <strong>System Preferences >
Sharing</strong>, and turn on <strong>Remote Login</strong>. You can futher restrict which user can
login via SSH on the same screen.</p>

<p><img src="/images/mac-tips/remote-login.png" title="A screenshot Sharing dialog box." alt="A screenshot Sharing dialog box."></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using sshuttle in daily work]]></title>
    <link href="http://teohm.github.com/blog/2012/04/01/using-sshuttle-in-daily-work/"/>
    <updated>2012-04-01T13:13:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/04/01/using-sshuttle-in-daily-work</id>
    <content type="html"><![CDATA[<p>I was first introduced to <a href="https://github.com/apenwarr/sshuttle"><strong>sshuttle</strong></a> by Sooyoung (<a href="https://twitter.com/#!/5ooyoung">@5ooyoung</a>) in <a href="http://favoritemedium.com/">Favorite Medium</a>
as a workaround to The Great Firewall in China.</p>

<p>Since then, it has become my <strong>light-weight network tunneling tool</strong> in daily work.</p>

<h2>Install sshuttle</h2>

<p>The installation is easy now. You can install it through Mac OSX Homebrew, or <a href="http://packages.ubuntu.com/precise/sshuttle">Ubuntu apt-get</a>.</p>

<p><code>bash
brew install sshuttle
</code></p>

<h2>I use sshuttle to..</h2>

<h3>1. Tunnel all traffic</h3>

<p>This is the first command I learned.
It <strong>forwards all TCP traffic and DNS requests to a remote SSH server</strong>.</p>

<p><code>bash
sshuttle --dns -vr ssh_server 0/0
</code>
Just like <code>ssh</code>, you can use any server specified in <code>~/.ssh/config</code>.
The <code>-v</code> flag means verbose mode.</p>

<p>Besides TCP and DNS, currently <code>sshuttle</code> <strong>does not forward other requests
<em>such as</em> UDP, ICMP ping etc</strong>.</p>

<h3>2. Tunnel all traffic, but exclude some</h3>

<p>You can <strong>exclude certain TCP traffic using <code>-x</code> option</strong>.</p>

<p><code>bash
sshuttle --dns -vr ssh_server -x 121.9.204.0/24 -x 61.135.196.21 0/0
</code></p>

<p>For instance, when I am in China, I don't want to tunnel
<a href="http://youku.com">Youku.com</a> traffic to a foreign server,
because its movie streaming service is only available within China.</p>

<p>In this case, I use <code>-x</code> option to exclude Youku.com IP addresses.</p>

<h3>3. Tunnel only certain traffic</h3>

<p>To tunnel only certain TCP traffic, <strong>specify the IP addresses
or <a href="http://www.subnet-calculator.com/cidr.php">IP ranges</a> that need tunneling</strong>.</p>

<p><code>bash
sshuttle -vr ssh_server 121.9.204.0/24 61.135.196.21
</code></p>

<p>This command comes in handy, whenever I need to test an app feature (e.g. Netflix movie streaming)
which only available in certain countries, or to bypass ISP faulty caches.</p>

<h3>4. VPN to office network</h3>

<p>I seldom do VPN, but all you need is <strong>the remote SSH server with <code>-NH</code> flags turned on</strong>.</p>

<p><code>bash
sshuttle -NHvr office_ssh_server
</code></p>

<p><code>-N</code> flag tells sshuttle to figure out by itself the IP subnets to forward,
and <code>-H</code> flag to scan for hostnames within remote subnets and store them temporarily in <code>/etc/hosts</code>.</p>

<h2>IP addresses.. troublesome?</h2>

<p>Well, I try not to deal with IP addresses manually. So I wrote a few
<strong><a href="https://github.com/teohm/dotfiles/blob/master/.bashrc.d/sshuttle_helpers">sshuttle helpers</a>
(<code>tnl</code>, <code>tnlbut</code>, <code>tnlonly</code>, <code>vpnto</code>)</strong> that allow me to <strong>use domain names instead of IP addresses</strong>:</p>

<h3>Tunnel all traffic</h3>

<p><code>bash
tnl
</code></p>

<h3>Tunnel all traffic, but exclude some</h3>

<p><code>bash
tnlbut youku.com weibo.com
</code></p>

<h3>Tunnel only certain traffic</h3>

<p><code>bash
tnlonly netflix.com movies.netflix.com
</code></p>

<h3>VPN to office network</h3>

<p><code>bash
vpnto office_ssh_server
</code></p>

<p>The script is available on <a href="https://github.com/teohm/dotfiles/blob/master/.bashrc.d/sshuttle_helpers">my GitHub repo</a>.
You can load it into your <code>~/.bashrc</code>. <strong>To override the default tunneling SSH server</strong> in the script:
<code>
TNL_SERVER=user@another_server tnl
</code></p>
]]></content>
  </entry>
  
</feed>
