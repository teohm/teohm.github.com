<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2012-03-23T23:32:11+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Git Internals by Example]]></title>
    <link href="http://teohm.github.com/blog/2011/05/30/learning-git-internals-by-example/"/>
    <updated>2011-05-30T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/30/learning-git-internals-by-example</id>
    <content type="html"><![CDATA[<p><em>Status: Draft.</em><br/>
<em>Plan to revise this post, probably simplify it in future..</em></p>

<h2>Movitation</h2>

<p>After switching to Git from Subversion and Mercurial for a few months, somehow I feel that Git is fundamentally different from Subversion or Mercurial, but couldn't really tell the differences. I often see terms like tree, parent etc. in GitHub, which I have no idea what they actually mean.</p>

<p>So I decided to spent some time to learn Git.</p>

<p>I will try to summarize and publish important stuffs I learned about Git along the way.. but here is the first entry, about Git internals, which helped me to answer how Git is different other source control tools.</p>

<h2>Objects, References, The Index</h2>

<p>To understand the core of Git internals, there are 3 things to we should know: <strong>objects, references, the index</strong>.</p>

<p>I find this model is elegant. It fits well in a small diagram, as well as in my head.</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/big-picture.png" alt="A picture illustrates files in .git directory mentioned in this article." /></p>

<h3>Objects</h3>

<p>All files that you commited into a Git repository, including the commit info are stored as <strong>objects</strong> in <code>.git/objects/</code>.</p>

<p>An object is identified by a 40-character-long string -- SHA1 hash of the object's content.</p>

<p>There are <strong>4 types</strong> of objects:</p>

<ol>
<li><em>blob</em> - stores file content.</li>
<li><em>tree</em> - stores direcotry layouts and filenames.</li>
<li><em>commit</em> - stores commit info and forms the Git commit graph.</li>
<li><em>tag</em> - stores annotated tag.</li>
</ol>


<p>The example will illustrate how these objects relate to each others.</p>

<h3>References</h3>

<p>A <em>branch</em>, <em>remote branch</em> or a <em>tag</em> (also called <em>lightweight tag</em>) in Git, is just a <strong>pointer to an object</strong>, usually a commit object.</p>

<p>They are stored as plain text files in <code>.git/refs/</code>.</p>

<h4>Symbolic References</h4>

<p>Git has a special kind of reference, called <em>symbolic reference</em>. It doesn't point to an object directly. Instead, it <strong>points to another reference</strong>.</p>

<p>For instance, <code>.git/HEAD</code> is a symbolic reference. It points to the current branch you are working on.</p>

<h3>The Index</h3>

<p>The index is a staging area, stored as a binary file in <code>.git/index</code>.</p>

<p>When <code>git add</code> a file, Git adds the file info to the index. When <code>git commit</code>, Git only commits what's listed in the index.</p>

<hr />

<h2>Examples</h2>

<p>Let's walkthrough a simple example, to create a Git repository, commit some files and see what happened behind the scene in <code>.git</code> directory.</p>

<h3>Initialize New Repository</h3>

<p><div>
  <pre>
    <code class='bash'>$ git init canai</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/init.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Empty <code>.git/objects/</code> and <code>.git/refs/</code> created.</li>
<li>No index file yet.</li>
<li><code>HEAD</code> symbolic reference created.

<pre><code>$ cat .git/HEAD 
ref: refs/heads/master
</code></pre></li>
</ul>


<h3>Add New File</h3>

<p><div>
  <pre>
    <code class='bash'>$ echo &quot;A roti canai project.&quot; &gt;&gt; README
$ git add README</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/new-file.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file created.<br/>
It has a SHA1 hash that points to a blob object.

<pre><code>$ git ls-files --stage
100644 5f89c6f016cad2d419e865df380595e39b1256db 0 README
</code></pre></li>
<li>Blob object created.<br/>
The content of README file is stored in this blob.

<pre><code># .git/objects/5f/89c6f016cad2d419e865df380595e39b1256db
$ git cat-file blob 5f89c6
A roti canai project.
</code></pre></li>
</ul>


<h3>First Commit</h3>

<p><div>
  <pre>
    <code class='bash'>$ git commit -m'first commit'
[master (root-commit) d9976cf] first commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 README</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/first-commit.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Branch 'master' reference created.<br/>
It points to the lastest commit object in 'master' branch.

<pre><code>$ cat .git/refs/heads/master 
d9976cfe0430557885d162927dd70186d0f521e8
</code></pre></li>
<li>First commit object created.<br/>
It points to the root tree object.

<pre><code># .git/objects/d9/976cfe0430557885d162927dd70186d0f521e8
$ git cat-file commit d9976cf
tree 0ff699bbafc5d17d0637bf058c924ab405b5dcfe
author Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306739524 +0800
committer Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306739524 +0800

first commit
</code></pre></li>
<li>Tree object created.<br/>
This tree represents the 'canai' directory.

<pre><code># .git/objects/0f/f699bbafc5d17d0637bf058c924ab405b5dcfe
$ git ls-tree 0ff699
100644 blob 5f89c6f016cad2d419e865df380595e39b1256db  README
</code></pre></li>
</ul>


<h3>Add Modified File</h3>

<p><div>
  <pre>
    <code class='bash'>$ echo &quot;Welcome everyone.&quot; &gt;&gt; README
$ git add README</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/modified-file.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file updated.<br/>
Notice it points to a new blob?

<pre><code>$ git ls-files --stage
100644 1192db4c15e019da7fc053225d09dea14bc3ac07 0 README
</code></pre></li>
<li>Blob object created.<br/>
The entire README content is stored as a new blob.

<pre><code># .git/objects/11/92db4c15e019da7fc053225d09dea14bc3ac07
$ git cat-file blob 1192db
A roti canai project.
Welcome everyone.
</code></pre></li>
</ul>


<h3>Add File into Subdirectory</h3>

<p><div>
  <pre>
    <code class='bash'>$ mkdir doc
$ echo &quot;[[TBD]] manual toc&quot; &gt;&gt; doc/manual.txt
$ git add doc</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/subdir.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file updated.

<pre><code>$ git ls-files --stage
100644 1192db4c15e019da7fc053225d09dea14bc3ac07 0 README
100644 ea283e4fb22719fad512405d41dffa050cd16f9a 0 doc/manual.txt
</code></pre></li>
<li>Blob object created.

<pre><code># .git/objects/ea/283e4fb22719fad512405d41dffa050cd16f9a
$ git cat-file blob ea283
[[TBD]] manual toc
</code></pre></li>
</ul>


<h3>Second Commit</h3>

<p><div>
  <pre>
    <code class='bash'>$ git commit -m'second commit'
[master 556eaf3] second commit
 2 files changed, 2 insertions(+), 0 deletions(-)
 create mode 100644 doc/manual.txt</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/second-commit.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Branch 'master' reference updated.<br/>
It points to a lastest commit in this branch.

<pre><code>$ cat .git/refs/heads/master 
556eaf374886d4c07a1906b9fdcaba195292b96
</code></pre></li>
<li>Second commit object created.
Notice its 'parent' points to the first commit object. This forms a commit graph.

<pre><code>$ git cat-file commit 556e
tree 7729a8b15b747bce541a9752a8f10d57daf221b6
parent d9976cfe0430557885d162927dd70186d0f521e8
author Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306743598 +0800
committer Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306743598 +0800

second commit
</code></pre></li>
<li>New root tree object created.

<pre><code>$ git ls-tree 7729
100644 blob 1192db4c15e019da7fc053225d09dea14bc3ac07  README
040000 tree 6ff17d485bf857514f299f0bde0e2a5c932bd055  doc
</code></pre></li>
<li>New subdir tree object created.

<pre><code>$ git ls-tree 6ff1
100644 blob ea283e4fb22719fad512405d41dffa050cd16f9a  manual.txt
</code></pre></li>
</ul>


<h3>Add Annotated Tag</h3>

<p><div>
  <pre>
    <code class='bash'>$ git tag -a -m'this is annotated tag' v0.1 d9976</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/annotated-tag.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Tag reference created.<br/>
It points to a tag object.

<pre><code>$ cat .git/refs/tags/v0.1 
c758f4820f02acf20bb3f6d7f6098f25ee6ed730
</code></pre></li>
<li>Tag object created.

<pre><code>$ git cat-file tag c758
object d9976cfe0430557885d162927dd70186d0f521e8
type commit
tag v0.1
tagger Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306744918 +0800

this is annotated tag
</code></pre></li>
</ul>


<h3>Add new (lightweight) tag</h3>

<p><div>
  <pre>
    <code class='bash'>$ git tag root-commit d9976</code>
  </pre>
</div>
</p>

<p><img src="/images/2011-05-30-learning-git-internals-by-example/new-tag.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Tag reference created.<br/>
It points to a commit object.

<pre><code>$ cat .git/refs/tags/root-commit 
d9976cfe0430557885d162927dd70186d0f521e8
</code></pre></li>
</ul>


<h2>More Readings</h2>

<ul>
<li>"Chapter 7: Internals and Plumbing" in <a href="http://book.git-scm.com/index.html">The Git Community Book</a>.</li>
<li>"Chapter 9: Git Internals" in <a href="http://progit.org/book/ch9-0.html">Pro Git</a>.</li>
</ul>


<h2>What's Next?</h2>

<p>Looking for a minimal git workflow suitable for a distributed team, long-running project..</p>
]]></content>
  </entry>
  
</feed>
