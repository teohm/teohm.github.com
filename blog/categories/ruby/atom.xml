<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2013-01-10T14:15:21+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reload required files in Rails]]></title>
    <link href="http://teohm.github.com/blog/2013/01/10/reload-required-files-in-rails/"/>
    <updated>2013-01-10T12:34:00+08:00</updated>
    <id>http://teohm.github.com/blog/2013/01/10/reload-required-files-in-rails</id>
    <content type="html"><![CDATA[<p>When a Rails project grows, I often notice the need to <strong>refactor domain logic into a separate module, isolated from Rails framework</strong>.</p>

<p>The isolated module will still stay in the main Rails app codebase, but can be easily packaged as a Ruby gem, tested separately, and used in other related applications.</p>

<h2>Requirements</h2>

<p>During the refactoring, we want to:</p>

<ol>
<li><p><strong>Use <code>require</code> to load the module like a normal gem</strong>. If possible, no dependency on Rails autoload features such as<code>require_dependency</code> and <code>autoload_paths</code>.</p></li>
<li><p><strong>Edit the module without restarting server during development</strong>. In other words, we need to find a way to <strong>reload the module on every request</strong>.</p></li>
</ol>


<h2>Reload <code>require</code> files</h2>

<p>After some research, I found a <a href="http://timcardenas.com/automatically-reload-gems-in-rails-327-on-eve"><strong>working solution</strong></a> by Timothy Cardenas:</p>

<p>```
ActionDispatch::Callbacks.to_prepare do
  if Object.const_defined?("Module1")</p>

<pre><code>Object.send(:remove_const, "Module1")
</code></pre>

<p>  end
  $".delete_if {|s| s.include?('module1') }
  require 'module1'
end
```</p>

<p>What it does is, before each request,</p>

<ol>
<li>Unload the top-level module.</li>
<li>Un-require all required files from the module.</li>
<li>Re-require the top-level module.</li>
</ol>


<h2>An extra step in Rails 3.2</h2>

<p>In Rails 3.2, <code>ActionDispatch::Callbacks.to_prepare</code> has a slightly different behavior. It will run before a request <strong>only if a watchable file is modified</strong>.</p>

<p>You need to specify your own <a href="http://api.rubyonrails.org/classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs">watchable files</a>:</p>

<p>```</p>

<h1>watch all .rb files recursively under modules/module1/ dir</h1>

<p>config.watchable_dirs['modules/module1'] = [:rb]
```</p>

<h2>Introduce <code>require_reloader</code> gem</h2>

<p>Before bundling the solution into a gem, I did a search on RubyGems.org and found Colin Young's <a href="https://github.com/colinyoung/gem_reloader">gem_reloader</a>. It's based on Timy's solution as well. I forked it and started playing around.</p>

<p>In the end, I made some major changes to include Rails 3.2 support, some fixes and new features.</p>

<p>So I decided to <strong>release it as a new Ruby gem: <a href="https://github.com/teohm/require_reloader">require_reloader</a></strong>.</p>

<p>```</p>

<h1>config/environments/development.rb</h1>

<p>YourApp::Application.configure do
  ...
  RequireReloader.watch :module1,</p>

<pre><code>path: 'modules/module1'
</code></pre>

<p>end
```</p>

<p>Currently it supports Rails 3, including 3.1 and 3.2.</p>

<p>If you are working on something similar, looking forward for your feedbacks and pull requests. It is not tested on Rails 2 yet, so pull requests are definitely welcomed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Using Ruby % (Percent) Notation]]></title>
    <link href="http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation/"/>
    <updated>2012-10-15T18:04:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation</id>
    <content type="html"><![CDATA[<p>If you seldom use Ruby percent (%) notation in daily work, here's a
<strong>quick summary</strong> of what I picked up recently.</p>

<h2>Delimiter allows any non-alphanum</h2>

<p>You can use any <strong>non alpha-numeric character</strong> as delimiter:
<code>ruby
%(any alpha-numeric)
%[char can be]
%%used as%
%!delimiter\!! # escape '!' literal
</code></p>

<h2>Bracket pairs no need to escape</h2>

<p><strong>No need to escape bracket pairs</strong>, even when <strong>nested</strong>.
You can escape, but will need to escape both open and close bracket.
<code>ruby
%( (pa(re(nt)he)sis) ) #=&gt; "(pa(re(nt)he)sis)"
%[ [square bracket] ]  #=&gt; "[square bracket]"
%{ {curly bracket} }   #=&gt; "{curly bracket}"
%&lt; &lt;pointy bracket&gt; &gt;  #=&gt; "&lt;pointy bracket&gt;"
%&lt; \&lt;this works as well\&gt; &gt;  #=&gt; "&lt;this works as well&gt;"
</code></p>

<h2>Modifiers for String, Regex, Array, Symbol, Shell command</h2>

<p>We often use % notation to <strong>create String and Array</strong> literals. But it
also supports <strong>Symbol, Regex and shell command</strong>.
<code>ruby
%(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%Q(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%q(non-interpolated string)
  #=&gt; "non-interpolated string"
%r(#{ "interpolated" } regexp)i
  #=&gt; /interpolated regexp/i
%w(non-interpolated\ string  separated\ by\ whitespaces)
  #=&gt; ['non-interpolated string', 'separated by whitespaces']
%W(interpolated\ string #{ "separated by whitespaces" })
  #=&gt; ['interpolated string', 'separated by whitespaces']
%s(non-interpolated symbol)
  #=&gt; :'non-interpolated symbol'
%x(echo #{ "interpolated shell command" })
  #=&gt; "interpolated shell command\n"
</code></p>

<p>Here's some <a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/percent_notation_spec.rb">% notation examples written in minitest</a> in case you interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby idiom to ensure variable is Array]]></title>
    <link href="http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array/"/>
    <updated>2012-10-02T23:27:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array</id>
    <content type="html"><![CDATA[<p><strong>Stop</strong> doing this:
```ruby
arry = input || []  # handle input == nil
arry = [input] unless arry.kind_of?(Array)  # handle single value object</p>

<p>arry.each do |item|
  #process item
end
```</p>

<p>In Ruby, you should use
<a href="http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-Array">Kernel#Array</a>
to <strong>convert the variable into an array object</strong>:</p>

<p>```ruby
Array(input).each do |item|
  # process item
end</p>

<h1>Array(nil)     # => []</h1>

<h1>Array("foo")   # => ["foo"]</h1>

<h1>Array([1,2,3]) # => [1,2,3]</h1>

<p>```</p>

<p><a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/kernel_array_spec.rb">More usage examples</a> written in minitest.</p>
]]></content>
  </entry>
  
</feed>
