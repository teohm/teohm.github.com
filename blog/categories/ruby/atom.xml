<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2012-11-22T23:25:54+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start Using Ruby % (Percent) Notation]]></title>
    <link href="http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation/"/>
    <updated>2012-10-15T18:04:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation</id>
    <content type="html"><![CDATA[<p>If you seldom use Ruby percent (%) notation in daily work, here's a
<strong>quick summary</strong> of what I picked up recently.</p>

<h2>Delimiter allows any non-alphanum</h2>

<p>You can use any <strong>non alpha-numeric character</strong> as delimiter:
<code>ruby
%(any alpha-numeric)
%[char can be]
%%used as%
%!delimiter\!! # escape '!' literal
</code></p>

<h2>Bracket pairs no need to escape</h2>

<p><strong>No need to escape bracket pairs</strong>, even when <strong>nested</strong>.
You can escape, but will need to escape both open and close bracket.
<code>ruby
%( (pa(re(nt)he)sis) ) #=&gt; "(pa(re(nt)he)sis)"
%[ [square bracket] ]  #=&gt; "[square bracket]"
%{ {curly bracket} }   #=&gt; "{curly bracket}"
%&lt; &lt;pointy bracket&gt; &gt;  #=&gt; "&lt;pointy bracket&gt;"
%&lt; \&lt;this works as well\&gt; &gt;  #=&gt; "&lt;this works as well&gt;"
</code></p>

<h2>Modifiers for String, Regex, Array, Symbol, Shell command</h2>

<p>We often use % notation to <strong>create String and Array</strong> literals. But it
also supports <strong>Symbol, Regex and shell command</strong>.
<code>ruby
%(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%Q(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%q(non-interpolated string)
  #=&gt; "non-interpolated string"
%r(#{ "interpolated" } regexp)i
  #=&gt; /interpolated regexp/i
%w(non-interpolated\ string  separated\ by\ whitespaces)
  #=&gt; ['non-interpolated string', 'separated by whitespaces']
%W(interpolated\ string #{ "separated by whitespaces" })
  #=&gt; ['interpolated string', 'separated by whitespaces']
%s(non-interpolated symbol)
  #=&gt; :'non-interpolated symbol'
%x(echo #{ "interpolated shell command" })
  #=&gt; "interpolated shell command\n"
</code></p>

<p>Here's some <a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/percent_notation_spec.rb">% notation examples written in minitest</a> in case you interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby idiom to ensure variable is Array]]></title>
    <link href="http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array/"/>
    <updated>2012-10-02T23:27:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array</id>
    <content type="html"><![CDATA[<p><strong>Stop</strong> doing this:
```ruby
arry = input || []  # handle input == nil
arry = [input] unless arry.kind_of?(Array)  # handle single value object</p>

<p>arry.each do |item|
  #process item
end
```</p>

<p>In Ruby, you should use
<a href="http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-Array">Kernel#Array</a>
to <strong>convert the variable into an array object</strong>:</p>

<p>```ruby
Array(input).each do |item|
  # process item
end</p>

<h1>Array(nil)     # => []</h1>

<h1>Array("foo")   # => ["foo"]</h1>

<h1>Array([1,2,3]) # => [1,2,3]</h1>

<p>```</p>

<p><a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/kernel_array_spec.rb">More usage examples</a> written in minitest.</p>
]]></content>
  </entry>
  
</feed>
