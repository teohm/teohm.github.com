<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | teohm.dev]]></title>
  <link href="http://teohm.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2013-04-18T13:58:29+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[Huiming Teo (teohm)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef cookbooks for busy Ruby developers]]></title>
    <link href="http://teohm.github.com/blog/2013/04/17/chef-cookbooks-for-busy-ruby-developers/"/>
    <updated>2013-04-17T23:06:00+08:00</updated>
    <id>http://teohm.github.com/blog/2013/04/17/chef-cookbooks-for-busy-ruby-developers</id>
    <content type="html"><![CDATA[<p>Have you ever <strong>setup a Rails production environment from scratch, by
hand</strong>? If you had, I share your pain every time when a new project
started.</p>

<p>The process is often repetitive. To me, it seems to be a waste to do it
manually every time. It also consumes time and attention. It would be
great if I could spend them on tasks that bring more values to clients.</p>

<p>To minimize such waste, I have written two Chef cookbooks to <strong>automate
the process</strong>:</p>

<ul>
<li><a href="https://github.com/teohm/rackbox-cookbook"><strong>rackbox</strong></a>  - to provision <strong>rack-based web server</strong> (Nginx as front server, Unicorn and Passenger as upstream app servers, <code>rbenv</code> as ruby version manager).</li>
<li><a href="https://github.com/teohm/databox-cookbook"><strong>databox</strong></a> - to provision <strong>database server</strong> (supports MySQL and PostgreSQL).</li>
</ul>


<h2>Getting started</h2>

<p>In this post, I will show you a <strong>step-by-step guide</strong> on how to use the
cookbooks together with
<a href="https://github.com/matschaffer/knife-solo"><code>knife-solo</code></a> to provision a
remote server in 4 steps:</p>

<ol>
<li>setup Chef Solo environment</li>
<li>modify config file</li>
<li>provision remote server</li>
<li>tweak Capistrano <code>deploy.rb</code></li>
</ol>


<p>A working example in also available at
<a href="https://github.com/teohm/kitchen-example">teohm/kitchen-example</a>.</p>

<h2>1. Setup Chef Solo environment</h2>

<ul>
<li>Install Chef Solo tools on local machine.</li>
<li>Download Chef cookbooks to local machine.</li>
<li>Install <code>chef-solo</code> on remote server.</li>
</ul>


<h3>Install Chef Solo tools</h3>

<p>Let's create a new directory,</p>

<p><code>
mkdir chef-kitchen
cd chef-kitchen
</code></p>

<p>and a <code>Gemfile</code>.</p>

<p>```
source "https://rubygems.org"</p>

<p>gem "knife-solo", ">= 0.3.0pre3"
gem "berkshelf"
```</p>

<p>I recommend <code>knife-solo &gt;= 0.3</code> as it includes a few <a href="https://github.com/matschaffer/knife-solo/blob/master/CHANGELOG.md#changes-and-new-features">major fixes and
improvements</a>.</p>

<p>Now, install the ruby gems.</p>

<p><code>
bundle install
</code></p>

<p>Finally, setup a kitchen directory structure with <code>knife-solo</code>.</p>

<p><code>
bundle exec knife solo init .
</code></p>

<h3>Download Chef cookbooks</h3>

<p>I use <a href="http://berkshelf.com/">Berkshelf</a> to manage cookbooks. So we need a <code>Berksfile</code>,</p>

<p>```
site :opscode</p>

<p>cookbook "runit", ">= 1.1.2"  # HACK: force-use this version
cookbook "databox"
cookbook "rackbox"
```</p>

<p>(I added a hack here to force <code>berkshelf</code> to use <code>runit 1.1.2</code> required
by <code>rackbox</code>. Still looking for a better solution.)</p>

<p>We can now download cookbooks with <code>berks install</code>.</p>

<p><code>
bundle exec berks install --path cookbooks/
</code></p>

<h3>Install <code>chef-solo</code> on remote server</h3>

<p><code>
bundle exec knife solo prepare testbox
</code></p>

<h2>2. Customize config file</h2>

<ul>
<li>Download config example</li>
<li>Customize config file</li>
</ul>


<h3>Download config example</h3>

<p><code>
curl https://raw.github.com/teohm/kitchen-example/master/nodes/host.json.example --output nodes/testbox.json
</code></p>

<h3>Modify config file (JSON)</h3>

<p>The config file starts with a <code>run_list</code>. You specify a list of cookbook
recipes here. Chef will run them in the same order in this list.</p>

<p>It is followed by cookbook attributes. You can modify these attributes.
A full reference of attributes are described in each cookbook's README
(see <a href="https://github.com/teohm/appbox-cookbook#attributes">appbox</a>,
<a href="https://github.com/teohm/databox-cookbook#attributes">databox</a>,
<a href="https://github.com/teohm/rackbox-cookbook#attributes">rackbox</a>).</p>

<p>```
{
  "run_list": [</p>

<pre><code>"databox",
"rackbox"
</code></pre>

<p>  ],
  "appbox": {</p>

<pre><code>"deploy_keys": ["ssh-rsa 5bnmu23890fghghjk"],
"admin_keys": ["ssh-rsa 456789fghjkvbn567"]
</code></pre>

<p>  },
  "databox": {</p>

<pre><code>"db_root_password": "welcome!",
"databases": {
  "mysql": [
    { "username": "app1",
      "password": "app1",
      "database_name": "app1_production" }
  ],
  "postgresql": [
    { "username": "app2",
      "password": "app2",
      "database_name": "app2_production" }
  ]
}
</code></pre>

<p>  },
  "rackbox": {</p>

<pre><code>"ruby": {
  "versions": ["1.9.3-p385", "1.9.2-p320"],
  "global_version": "1.9.3-p385"
},
"apps": {
  "unicorn": [
    { "appname": "app1",
      "hostname": "app1.test.com" }
  ],
  "passenger": [
    { "appname": "app2",
      "hostname": "app2.test.com" }
  ]
}
</code></pre>

<p>  }
}</p>

<p>```</p>

<h2>3. Provision remote server</h2>

<p><code>
bundle exec knife solo cook testbox
</code></p>

<p>It uploads the kitchen directory and runs <code>chef-solo</code> on the remote
server. Chef-solo will then takeover and execute the run list to setup
everything.</p>

<h3>What do we get at this point?</h3>

<p>Basically, it's done!</p>

<p>We have a <strong>full-stack, rack-based server</strong> with:</p>

<ul>
<li>3 user accounts (deploy, devops, apps)</li>
<li><code>rbenv</code> as ruby version manager</li>
<li><code>nginx</code> as front-server</li>
<li><code>unicorn</code>, <code>passenger-standalone</code> as upstream app servers, managed by <code>runit</code></li>
<li><code>postgresql</code>, <code>mysql</code> installed and databases created</li>
<li>all apps will be stored in <code>/home/apps/</code></li>
</ul>


<h2>4. Tweak Capistrano deploy.rb</h2>

<p>Now, it's ready to deploy a Rack-based app to the remote server!</p>

<p>I have two example Rails apps available on Github:</p>

<ul>
<li><a href="https://github.com/teohm/sample-app1">teohm/sample-app1</a> runs on unicorn,</li>
<li><a href="https://github.com/teohm/sample-app2">teohm/sample-app2</a> runs on passenger-standalone.</li>
</ul>


<p>There are a few <strong>minor tweaks required in Capistrano <code>deploy.rb</code></strong>, as listed below.</p>

<p>I will explain the tweaks in details next time. Meanwhile, check out the complete working examples at: <a href="https://github.com/teohm/sample-app1/blob/master/config/deploy.rb">app1/config/deploy.rb</a> and <a href="https://github.com/teohm/sample-app2/blob/master/config/deploy.rb">app2/config/deploy.rb</a></p>

<h3>Login as <code>deploy</code> user</h3>

<p><code>
set :user, "deploy"
</code></p>

<h3>Deploy to <code>/home/apps</code></h3>

<p><code>
set :deploy_to, "/home/apps/#{application}"
</code></p>

<h3>Load <code>rbenv</code> in Capistrano</h3>

<p><code>
default_run_options[:shell] = '/bin/bash --login'
</code></p>

<h3>Run bundler with <code>--binstubs</code></h3>

<p><code>
require 'bundler/capistrano'
set :bundle_flags, "--deployment --binstubs"
set :bundle_without, [:test, :development, :deploy]
</code></p>

<h3>Restart app with <code>runit sv</code></h3>

<p>```
namespace :deploy do
  task :start do</p>

<pre><code>run "sudo sv up app1"
</code></pre>

<p>  end
  task :stop do</p>

<pre><code>run "sudo sv down app1"
</code></pre>

<p>  end
  task :restart, :roles => :app, :except => { :no_release => true } do</p>

<pre><code>run "sudo sv restart app1"
</code></pre>

<p>  end
end</p>

<p>```</p>

<h2>Feedback</h2>

<p>If you are interested on using the cookbooks, or have an idea/feedback/question about this topic, feel free to drop me (<a href="http://twitter.com/teohm">@teohm</a>) a message. Pull requests and issue reports are definitely welcomed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reload required files in Rails]]></title>
    <link href="http://teohm.github.com/blog/2013/01/10/reload-required-files-in-rails/"/>
    <updated>2013-01-10T12:34:00+08:00</updated>
    <id>http://teohm.github.com/blog/2013/01/10/reload-required-files-in-rails</id>
    <content type="html"><![CDATA[<p>When a Rails project grows, I often notice the need to <strong>refactor domain logic into a separate module, isolated from Rails framework</strong>.</p>

<p>The isolated module will still stay in the main Rails app codebase, but can be easily packaged as a Ruby gem, tested separately, and used in other related applications.</p>

<h2>Requirements</h2>

<p>During the refactoring, we want to:</p>

<ol>
<li><p><strong>Use <code>require</code> to load the module like a normal gem</strong>. If possible, no dependency on Rails autoload features such as<code>require_dependency</code> and <code>autoload_paths</code>.</p></li>
<li><p><strong>Edit the module without restarting server during development</strong>. In other words, we need to find a way to <strong>reload the module on every request</strong>.</p></li>
</ol>


<h2>Reload <code>require</code> files</h2>

<p>After some research, I found a <a href="http://timcardenas.com/automatically-reload-gems-in-rails-327-on-eve"><strong>working solution</strong></a> by Timothy Cardenas:</p>

<p>```
ActionDispatch::Callbacks.to_prepare do
  if Object.const_defined?("Module1")</p>

<pre><code>Object.send(:remove_const, "Module1")
</code></pre>

<p>  end
  $".delete_if {|s| s.include?('module1') }
  require 'module1'
end
```</p>

<p>What it does is, before each request,</p>

<ol>
<li>Unload the top-level module.</li>
<li>Un-require all required files from the module.</li>
<li>Re-require the top-level module.</li>
</ol>


<h2>An extra step in Rails 3.2</h2>

<p>In Rails 3.2, <code>ActionDispatch::Callbacks.to_prepare</code> has a slightly different behavior. It will run before a request <strong>only if a watchable file is modified</strong>.</p>

<p>You need to specify your own <a href="http://api.rubyonrails.org/classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs">watchable files</a>:</p>

<p>```</p>

<h1>watch all .rb files recursively under modules/module1/ dir</h1>

<p>config.watchable_dirs['modules/module1'] = [:rb]
```</p>

<h2>Introduce <code>require_reloader</code> gem</h2>

<p>Before bundling the solution into a gem, I did a search on RubyGems.org and found Colin Young's <a href="https://github.com/colinyoung/gem_reloader">gem_reloader</a>. It's based on Timy's solution as well. I forked it and started playing around.</p>

<p>In the end, I made some major changes to include Rails 3.2 support, some fixes and new features.</p>

<p>So I decided to <strong>release it as a new Ruby gem: <a href="https://github.com/teohm/require_reloader">require_reloader</a></strong>.</p>

<p>```</p>

<h1>config/environments/development.rb</h1>

<p>YourApp::Application.configure do
  ...
  RequireReloader.watch :module1,</p>

<pre><code>path: 'modules/module1'
</code></pre>

<p>end
```</p>

<p>Currently it supports Rails 3, including 3.1 and 3.2.</p>

<p>If you are working on something similar, looking forward for your feedbacks and pull requests. It is not tested on Rails 2 yet, so pull requests are definitely welcomed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Using Ruby % (Percent) Notation]]></title>
    <link href="http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation/"/>
    <updated>2012-10-15T18:04:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/15/start-using-ruby-percent-notation</id>
    <content type="html"><![CDATA[<p>If you seldom use Ruby percent (%) notation in daily work, here's a
<strong>quick summary</strong> of what I picked up recently.</p>

<h2>Delimiter allows any non-alphanum</h2>

<p>You can use any <strong>non alpha-numeric character</strong> as delimiter:
<code>ruby
%(any alpha-numeric)
%[char can be]
%%used as%
%!delimiter\!! # escape '!' literal
</code></p>

<h2>Bracket pairs no need to escape</h2>

<p><strong>No need to escape bracket pairs</strong>, even when <strong>nested</strong>.
You can escape, but will need to escape both open and close bracket.
<code>ruby
%( (pa(re(nt)he)sis) ) #=&gt; "(pa(re(nt)he)sis)"
%[ [square bracket] ]  #=&gt; "[square bracket]"
%{ {curly bracket} }   #=&gt; "{curly bracket}"
%&lt; &lt;pointy bracket&gt; &gt;  #=&gt; "&lt;pointy bracket&gt;"
%&lt; \&lt;this works as well\&gt; &gt;  #=&gt; "&lt;this works as well&gt;"
</code></p>

<h2>Modifiers for String, Regex, Array, Symbol, Shell command</h2>

<p>We often use % notation to <strong>create String and Array</strong> literals. But it
also supports <strong>Symbol, Regex and shell command</strong>.
<code>ruby
%(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%Q(interpolated string (#{ "default" }))
  #=&gt; "interpolated string (default)"
%q(non-interpolated string)
  #=&gt; "non-interpolated string"
%r(#{ "interpolated" } regexp)i
  #=&gt; /interpolated regexp/i
%w(non-interpolated\ string  separated\ by\ whitespaces)
  #=&gt; ['non-interpolated string', 'separated by whitespaces']
%W(interpolated\ string #{ "separated by whitespaces" })
  #=&gt; ['interpolated string', 'separated by whitespaces']
%s(non-interpolated symbol)
  #=&gt; :'non-interpolated symbol'
%x(echo #{ "interpolated shell command" })
  #=&gt; "interpolated shell command\n"
</code></p>

<p>Here's some <a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/percent_notation_spec.rb">% notation examples written in minitest</a> in case you interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby idiom to ensure variable is Array]]></title>
    <link href="http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array/"/>
    <updated>2012-10-02T23:27:00+08:00</updated>
    <id>http://teohm.github.com/blog/2012/10/02/ruby-idiom-to-ensure-variable-is-array</id>
    <content type="html"><![CDATA[<p><strong>Stop</strong> doing this:
```ruby
arry = input || []  # handle input == nil
arry = [input] unless arry.kind_of?(Array)  # handle single value object</p>

<p>arry.each do |item|
  #process item
end
```</p>

<p>In Ruby, you should use
<a href="http://www.ruby-doc.org/core-1.9.3/Kernel.html#method-i-Array">Kernel#Array</a>
to <strong>convert the variable into an array object</strong>:</p>

<p>```ruby
Array(input).each do |item|
  # process item
end</p>

<h1>Array(nil)     # => []</h1>

<h1>Array("foo")   # => ["foo"]</h1>

<h1>Array([1,2,3]) # => [1,2,3]</h1>

<p>```</p>

<p><a href="https://github.com/teohm/a-dip-in-ruby/blob/master/spec/kernel_array_spec.rb">More usage examples</a> written in minitest.</p>
]]></content>
  </entry>
  
</feed>
