<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[teohm.dev]]></title>
  <link href="http://teohm.github.com/atom.xml" rel="self"/>
  <link href="http://teohm.github.com/"/>
  <updated>2012-01-04T00:03:01+08:00</updated>
  <id>http://teohm.github.com/</id>
  <author>
    <name><![CDATA[teohm (Huiming Teo)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using RABL in Rails JSON Web API]]></title>
    <link href="http://teohm.github.com/blog/2011/05/31/using-rabl-in-rails-json-web-api/"/>
    <updated>2011-05-31T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/31/using-rabl-in-rails-json-web-api</id>
    <content type="html"><![CDATA[<p>Let&#8217;s use an event management app as the example.</p>

<p>The app has a simple feature: a user can add some events, then invite other users to attend the event. Its data are represented in 3 models: User, Event, and Event Guest.
<img src="http://teohm.github.com/images/2011-05-31-using-rabl-in-rails-json-web-api/models.png" alt="An ER digram that shows the domain models." /></p>

<p>Let say, we are going to add a read-only JSON web API for clients to browse data records from the app.</p>

<h2>Problems</h2>

<h3>Model is not view</h3>

<p>When working on a non-trivial web API, you will soon <a href="http://engineering.gomiso.com/2011/05/16/if-youre-using-to_json-youre-doing-it-wrong/">realize</a> that, model often cannot be serialized directly in web API.</p>

<p>Within the same app, one API may need to render a summary view of the model, while another needs a detail view of the same model. You want to serialize a view or view object, not a model.</p>

<p><a href="https://github.com/nesquena/rabl"><strong>RABL (Ruby API Builder Language) gem</strong></a> is designed for this purpose.</p>

<h3>Define once, reuse everywhere</h3>

<p>Let say, we need to render these user attributes: <code>id</code>, <code>username</code>, <code>email</code>, <code>display_name</code>, except <code>password</code>.</p>

<p>In RABL, we can define the attribute whitelist in a RABL template.</p>

<div>
  <pre>
    <code class='ruby'># tryrabl/app/views/users/base.rabl
attributes :id, :username, :email, :display_name</code>
  </pre>
</div>


<p>To show individual user, we can now reuse the template through RABL <code>extends</code>.</p>

<div>
  <pre>
    <code class='ruby'># tryrabl/app/views/users/show.rabl
extends &quot;users/base&quot;
object @user

## JSON output:
# {
#     &quot;user&quot;: {
#         &quot;id&quot;: 8,
#         &quot;username&quot;: &quot;blaise&quot;,
#         &quot;email&quot;: &quot;matteo@wilkinsonhuel.name&quot;,
#         &quot;display_name&quot;: &quot;Ms. Noe Lowe&quot;
#     }
# }</code>
  </pre>
</div>


<p>Here&#8217;s another example to show a list of users.</p>

<div>
  <pre>
    <code class='ruby'># tryrabl/app/views/users/index.rabl
extends &quot;users/base&quot;
collection @users

## JSON output:
# [{
#     &quot;user&quot;: {
#         &quot;id&quot;: 1,
#         &quot;username&quot;: &quot;alanna&quot;,
#         &quot;email&quot;: &quot;rubie@hayes.name&quot;,
#         &quot;display_name&quot;: &quot;Mrs. Gaylord Hoeger&quot;
#     }
# }, {
#     &quot;user&quot;: {
#         &quot;id&quot;: 2,
#         &quot;username&quot;: &quot;jarrell.robel&quot;,
#         &quot;email&quot;: &quot;jarod@eichmann.com&quot;,
#         &quot;display_name&quot;: &quot;Oran Lebsack&quot;
#     }
# }]</code>
  </pre>
</div>


<p>The template can be reused in nested child as well, through RABL <code>child</code>.</p>

<div>
  <pre>
    <code class='ruby'>attributes :id, :title, :description, :start, :end, :location
child :creator =&gt; :creator do
  extends 'users/base'
end

## JSON output:
# {
#     &quot;event&quot;: {
#         &quot;id&quot;: 7,
#         &quot;title&quot;: &quot;Et earum sed fuga.&quot;,
#         &quot;description&quot;: &quot;Quis sed ..e ad.&quot;,
#         &quot;start&quot;: &quot;2011-05-31T08:31:45Z&quot;,
#         &quot;end&quot;: &quot;2011-06-01T08:31:45Z&quot;,
#         &quot;location&quot;: &quot;Saul Tunnel&quot;,
#         &quot;creator&quot;: {
#             &quot;id&quot;: 1,
#             &quot;username&quot;: &quot;alanna&quot;,
#             &quot;email&quot;: &quot;rubie@hayes.name&quot;,
#             &quot;display_name&quot;: &quot;Mrs. Gaylord Hoeger&quot;
#         }
#     }
# }</code>
  </pre>
</div>


<h3>Join table rendered as subclass</h3>

<p>I notice a recurring pattern in two recent projects. For instance, in this example, from client&#8217;s point of view, Event Guest is basically a User with an additional attribute: RSVP status.</p>

<p>When query database, usually we need to query the join table: <code>event_guests</code>.</p>

<div>
  <pre>
    <code class='ruby'>class GuestsController &lt; ApplicationController
  def index
    @guests = EventGuest.where(:event_id =&gt; params[:event_id])
  end
end</code>
  </pre>
</div>


<p>But when rendering, the result set needs to be rendered as a list of Users. RABL allows you to do that easily, using its <code>glue</code> feature (a weird name though :).</p>

<div>
  <pre>
    <code class='ruby'># tryrabl/app/views/guests/index.rabl
collection @event_guests

# include the additional attribute
attributes :rsvp

# add child attributes to parent model
glue :user do
  extends &quot;users/base&quot;
end

## JSON output:
# [{
#     &quot;event_guest&quot;: {
#         &quot;rsvp&quot;: &quot;PENDING&quot;,
#         &quot;id&quot;: 3,
#         &quot;username&quot;: &quot;myrna_harvey&quot;,
#         &quot;email&quot;: &quot;shad.armstrong@littelpouros.name&quot;,
#         &quot;display_name&quot;: &quot;Savion Balistreri&quot;
#     }
# }, {
#     &quot;event_guest&quot;: {
#         &quot;rsvp&quot;: &quot;PENDING&quot;,
#         &quot;id&quot;: 4,
#         &quot;username&quot;: &quot;adelle.nader&quot;,
#         &quot;email&quot;: &quot;brendon.howe@cormiergrady.info&quot;,
#         &quot;display_name&quot;: &quot;Edgardo Dickens&quot;
#     }
# }]</code>
  </pre>
</div>


<p>I think I will use RABL for the next Rails web API project.</p>

<p>The complete Rails example code is available at <a href="https://github.com/teohm/tryrabl">github.com/teohm/tryrabl</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Git Internals by Example]]></title>
    <link href="http://teohm.github.com/blog/2011/05/30/learning-git-internals-by-example/"/>
    <updated>2011-05-30T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/30/learning-git-internals-by-example</id>
    <content type="html"><![CDATA[<p><em>Status: Draft.</em><br/>
<em>Plan to revise this post, probably simplify it in future..</em></p>

<h2>Movitation</h2>

<p>After switching to Git from Subversion and Mercurial for a few months, somehow I feel that Git is fundamentally different from Subversion or Mercurial, but couldn&#8217;t really tell the differences. I often see terms like tree, parent etc. in GitHub, which I have no idea what they actually mean.</p>

<p>So I decided to spent some time to learn Git.</p>

<p>I will try to summarize and publish important stuffs I learned about Git along the way.. but here is the first entry, about Git internals, which helped me to answer how Git is different other source control tools.</p>

<h2>Objects, References, The Index</h2>

<p>To understand the core of Git internals, there are 3 things to we should know: <strong>objects, references, the index</strong>.</p>

<p>I find this model is elegant. It fits well in a small diagram, as well as in my head.</p>

<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/big-picture.png" alt="A picture illustrates files in .git directory mentioned in this article." /></p>

<h3>Objects</h3>

<p>All files that you commited into a Git repository, including the commit info are stored as <strong>objects</strong> in <code>.git/objects/</code>.</p>

<p>An object is identified by a 40-character-long string &#8211; SHA1 hash of the object&#8217;s content.</p>

<p>There are <strong>4 types</strong> of objects:</p>

<ol>
<li><em>blob</em> - stores file content.</li>
<li><em>tree</em> - stores direcotry layouts and filenames.</li>
<li><em>commit</em> - stores commit info and forms the Git commit graph.</li>
<li><em>tag</em> - stores annotated tag.</li>
</ol>


<p>The example will illustrate how these objects relate to each others.</p>

<h3>References</h3>

<p>A <em>branch</em>, <em>remote branch</em> or a <em>tag</em> (also called <em>lightweight tag</em>) in Git, is just a <strong>pointer to an object</strong>, usually a commit object.</p>

<p>They are stored as plain text files in <code>.git/refs/</code>.</p>

<h4>Symbolic References</h4>

<p>Git has a special kind of reference, called <em>symbolic reference</em>. It doesn&#8217;t point to an object directly. Instead, it <strong>points to another reference</strong>.</p>

<p>For instance, <code>.git/HEAD</code> is a symbolic reference. It points to the current branch you are working on.</p>

<h3>The Index</h3>

<p>The index is a staging area, stored as a binary file in <code>.git/index</code>.</p>

<p>When <code>git add</code> a file, Git adds the file info to the index. When <code>git commit</code>, Git only commits what&#8217;s listed in the index.</p>

<hr />

<h2>Examples</h2>

<p>Let&#8217;s walkthrough a simple example, to create a Git repository, commit some files and see what happened behind the scene in <code>.git</code> directory.</p>

<h3>Initialize New Repository</h3>

<div>
  <pre>
    <code class='bash'>$ git init canai</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/init.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Empty <code>.git/objects/</code> and <code>.git/refs/</code> created.</li>
<li>No index file yet.</li>
<li><code>HEAD</code> symbolic reference created.

<pre><code>$ cat .git/HEAD 
ref: refs/heads/master
</code></pre></li>
</ul>


<h3>Add New File</h3>

<div>
  <pre>
    <code class='bash'>$ echo &quot;A roti canai project.&quot; &gt;&gt; README
$ git add README</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/new-file.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file created.<br/>
It has a SHA1 hash that points to a blob object.

<pre><code>$ git ls-files --stage
100644 5f89c6f016cad2d419e865df380595e39b1256db 0 README
</code></pre></li>
<li>Blob object created.<br/>
The content of README file is stored in this blob.

<pre><code># .git/objects/5f/89c6f016cad2d419e865df380595e39b1256db
$ git cat-file blob 5f89c6
A roti canai project.
</code></pre></li>
</ul>


<h3>First Commit</h3>

<div>
  <pre>
    <code class='bash'>$ git commit -m'first commit'
[master (root-commit) d9976cf] first commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 README</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/first-commit.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Branch &#8216;master&#8217; reference created.<br/>
It points to the lastest commit object in &#8216;master&#8217; branch.

<pre><code>$ cat .git/refs/heads/master 
d9976cfe0430557885d162927dd70186d0f521e8
</code></pre></li>
<li>First commit object created.<br/>
It points to the root tree object.

<pre><code># .git/objects/d9/976cfe0430557885d162927dd70186d0f521e8
$ git cat-file commit d9976cf
tree 0ff699bbafc5d17d0637bf058c924ab405b5dcfe
author Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306739524 +0800
committer Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306739524 +0800

first commit
</code></pre></li>
<li>Tree object created.<br/>
This tree represents the &#8216;canai&#8217; directory.

<pre><code># .git/objects/0f/f699bbafc5d17d0637bf058c924ab405b5dcfe
$ git ls-tree 0ff699
100644 blob 5f89c6f016cad2d419e865df380595e39b1256db  README
</code></pre></li>
</ul>


<h3>Add Modified File</h3>

<div>
  <pre>
    <code class='bash'>$ echo &quot;Welcome everyone.&quot; &gt;&gt; README
$ git add README</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/modified-file.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file updated.<br/>
Notice it points to a new blob?

<pre><code>$ git ls-files --stage
100644 1192db4c15e019da7fc053225d09dea14bc3ac07 0 README
</code></pre></li>
<li>Blob object created.<br/>
The entire README content is stored as a new blob.

<pre><code># .git/objects/11/92db4c15e019da7fc053225d09dea14bc3ac07
$ git cat-file blob 1192db
A roti canai project.
Welcome everyone.
</code></pre></li>
</ul>


<h3>Add File into Subdirectory</h3>

<div>
  <pre>
    <code class='bash'>$ mkdir doc
$ echo &quot;[[TBD]] manual toc&quot; &gt;&gt; doc/manual.txt
$ git add doc</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/subdir.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Index file updated.

<pre><code>$ git ls-files --stage
100644 1192db4c15e019da7fc053225d09dea14bc3ac07 0 README
100644 ea283e4fb22719fad512405d41dffa050cd16f9a 0 doc/manual.txt
</code></pre></li>
<li>Blob object created.

<pre><code># .git/objects/ea/283e4fb22719fad512405d41dffa050cd16f9a
$ git cat-file blob ea283
[[TBD]] manual toc
</code></pre></li>
</ul>


<h3>Second Commit</h3>

<div>
  <pre>
    <code class='bash'>$ git commit -m'second commit'
[master 556eaf3] second commit
 2 files changed, 2 insertions(+), 0 deletions(-)
 create mode 100644 doc/manual.txt</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/second-commit.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Branch &#8216;master&#8217; reference updated.<br/>
It points to a lastest commit in this branch.

<pre><code>$ cat .git/refs/heads/master 
556eaf374886d4c07a1906b9fdcaba195292b96
</code></pre></li>
<li>Second commit object created.
Notice its &#8216;parent&#8217; points to the first commit object. This forms a commit graph.

<pre><code>$ git cat-file commit 556e
tree 7729a8b15b747bce541a9752a8f10d57daf221b6
parent d9976cfe0430557885d162927dd70186d0f521e8
author Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306743598 +0800
committer Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306743598 +0800

second commit
</code></pre></li>
<li>New root tree object created.

<pre><code>$ git ls-tree 7729
100644 blob 1192db4c15e019da7fc053225d09dea14bc3ac07  README
040000 tree 6ff17d485bf857514f299f0bde0e2a5c932bd055  doc
</code></pre></li>
<li>New subdir tree object created.

<pre><code>$ git ls-tree 6ff1
100644 blob ea283e4fb22719fad512405d41dffa050cd16f9a  manual.txt
</code></pre></li>
</ul>


<h3>Add Annotated Tag</h3>

<div>
  <pre>
    <code class='bash'>$ git tag -a -m'this is annotated tag' v0.1 d9976</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/annotated-tag.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Tag reference created.<br/>
It points to a tag object.

<pre><code>$ cat .git/refs/tags/v0.1 
c758f4820f02acf20bb3f6d7f6098f25ee6ed730
</code></pre></li>
<li>Tag object created.

<pre><code>$ git cat-file tag c758
object d9976cfe0430557885d162927dd70186d0f521e8
type commit
tag v0.1
tagger Huiming Teo &lt;huiming@favoritemedium.com&gt; 1306744918 +0800

this is annotated tag
</code></pre></li>
</ul>


<h3>Add new (lightweight) tag</h3>

<div>
  <pre>
    <code class='bash'>$ git tag root-commit d9976</code>
  </pre>
</div>


<p><img src="http://teohm.github.com/images/2011-05-30-learning-git-internals-by-example/new-tag.png" alt="illustration" /></p>

<p>What happened:</p>

<ul>
<li>Tag reference created.<br/>
It points to a commit object.

<pre><code>$ cat .git/refs/tags/root-commit 
d9976cfe0430557885d162927dd70186d0f521e8
</code></pre></li>
</ul>


<h2>More Readings</h2>

<ul>
<li>&#8220;Chapter 7: Internals and Plumbing&#8221; in <a href="http://book.git-scm.com/index.html">The Git Community Book</a>.</li>
<li>&#8220;Chapter 9: Git Internals&#8221; in <a href="http://progit.org/book/ch9-0.html">Pro Git</a>.</li>
</ul>


<h2>What&#8217;s Next?</h2>

<p>Looking for a minimal git workflow suitable for a distributed team, long-running project..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using JQuery Validation in Rails Remote Form]]></title>
    <link href="http://teohm.github.com/blog/2011/05/25/using-jquery-validation-in-rails-remote-form/"/>
    <updated>2011-05-25T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/25/using-jquery-validation-in-rails-remote-form</id>
    <content type="html"><![CDATA[<p>In a recent project, I was trying to use <a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">JQuery Validation</a> in an <a href="https://github.com/rails/jquery-ujs/blob/bb620a29199214b5c7a3a015372fda28b69c69a1/src/rails.js">earlier version</a> of Rails 3 remote form (<a href="https://github.com/rails/jquery-ujs">jquery-ujs</a>). They didn&#8217;t work out well in IE.</p>

<p>After experimenting with the <a href="https://github.com/rails/jquery-ujs/blob/dad6982dc592686677e6845e681233c40d2ead27/src/rails.js">latest jquery-ujs</a> and making an embarrassing mistake, it turns out that the issue is resolved in the latest version.</p>

<p>(<em>Mistake</em>: You may notice I removed a previous post about this topic, where I mistakenly concluded the latest jquery-ujs is not working with JQuery Validation. Thanks to JangoSteve for <a href="https://github.com/rails/jquery-ujs/issues/165#comment_1228899">pointing it out</a>. The post was misleading, so I believe it&#8217;s best to remove it to avoid confusion. :-)</p>

<h2>Get the latest <code>jquery-ujs</code></h2>

<p>There are 2 reasons to use the latest jquery-ujs:</p>

<ol>
<li>it has a patch that fixes the issue (see <a href="https://github.com/rails/jquery-ujs/issues/118">issue #118</a>).</li>
<li>it exposes an internal function that we may need &#8211; <code>$.rails.handleRemote()</code> (see <a href="http://www.alfajango.com/blog/rails-jquery-ujs-now-interactive/">more details</a>)</li>
</ol>


<h2>Working example</h2>

<p>The example is tested with:</p>

<ul>
<li>JQuery 1.6.1</li>
<li>JQuery Vaidation 1.8.1</li>
<li>Latest Rails UJS (commit: <a href="https://github.com/rails/jquery-ujs/blob/dad6982dc592686677e6845e681233c40d2ead27/src/rails.js">dad6982dc592686677e6</a>)</li>
</ul>


<p>Try run the example page on IE7/8: <a href="http://teohm.github.com/quirks/jquery-validate-ujs-conflict/jquery-ujs-latest.html">/quirks/jquery-validate-ujs-conflict/jquery-ujs-latest.html</a></p>

<h3>When using <code>submitHandler</code> in JQuery Validation</h3>

<p>If you are using JQuery Validation&#8217;s <code>submitHandler(form)</code> function, you need to
call <code>$.rails.handleRemote( $(form) )</code> function manually, so that it submits the form via XHR.</p>

<div>
  <pre>
    <code class='javascript'>$('#submit_form').validate({

  submitHandler: function(form) {
    // .. do something before submit ..
    $.rails.handleRemote( $(form) );  // submit via xhr
    //form.submit();                  // don't use, it submits the form directly
  }

});</code>
  </pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Mass Assignment]]></title>
    <link href="http://teohm.github.com/blog/2011/05/09/activerecord-mass-assignment/"/>
    <updated>2011-05-09T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/09/activerecord-mass-assignment</id>
    <content type="html"><![CDATA[<p>Even you haven&#8217;t heard of
<a href="http://guides.rubyonrails.org/security.html#mass-assignment">mass assignment</a>,
it already exists in your first Rails generated scaffold code.</p>

<div>
  <pre>
    <code class='ruby'>def create
  @comment = Comment.new(params[:comment])
  ..
end

def update
  ..
  @comment.update_attributes(params[:comment])
  ..
end</code>
  </pre>
</div>


<h2>Why knowing mass assignment is important?</h2>

<p>By default, mass assignment opens up an undesirable <strong>security hole</strong>,
by allowing web clients to update any attributes they passing in,
including attributes like <code>created_at</code>.</p>

<p>For details, you can read:</p>

<ul>
<li><a href="http://guides.rubyonrails.org/security.html#mass-assignment">Ruby On Rails Security Guide - Mass Assignment</a></li>
<li><a href="http://railspikes.com/2008/9/22/is-your-rails-application-safe-from-mass-assignment">Rail Spikes: Is your Rails application safe?</a></li>
</ul>


<h2>Mass assignment methods</h2>

<p>There are a few <strong>ActiveRecord methods</strong> that accept mass assignment:</p>

<ul>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-c-new"><code>new</code></a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-c-create"><code>create</code></a></li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-i-attributes-3D"><code>attributes=</code></a></li>
<li><a href="http://apidock.com/rails/ActiveRecord/Base/update_attributes"><code>update_attributes</code></a></li>
</ul>


<p>Using any of these methods, means you are now responsible for the safety
of the web application.</p>

<h2>Minimal protection</h2>

<p>To use mass assignment safely, we want to specify exactly which attributes
allowed to be updated.</p>

<h3>1. Define <code>attr_accessible</code> on every model</h3>

<p><code>attr_accessible</code> defines a white-list of attributes
that can be updated during mass assignment.</p>

<div>
  <pre>
    <code class='ruby'>class Comment &lt; ActiveRecord::Base
  attr_accessible :title, :content
end</code>
  </pre>
</div>


<h3>2. Enforce <code>attr_accessible</code> usage</h3>

<p>You may set the white-list default to empty. This forces you
to define the whitelist explicitly on a model, before
mass assignment can be used.</p>

<div>
  <pre>
    <code class='ruby'># config/initializer/enforce_attr_accessible.rb

ActiveRecord::Base.send(:attr_accessible, nil)</code>
  </pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord Model Equality]]></title>
    <link href="http://teohm.github.com/blog/2011/05/05/activerecord-model-equality/"/>
    <updated>2011-05-05T00:00:00+08:00</updated>
    <id>http://teohm.github.com/blog/2011/05/05/activerecord-model-equality</id>
    <content type="html"><![CDATA[<p>In daily web app development, we often need to check if two model objects are equal.
When I first started using Rails, this is what I wrote:</p>

<div>
  <pre>
    <code class='ruby'>if user.id == current_user.id
  # do something
end</code>
  </pre>
</div>


<h2>Use obj1 == obj2 instead</h2>

<p>Of course, that reflects my ignorance on learning the new tool.</p>

<p>So, here&#8217;s a proper way to compare if
<a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html#method-i-3D-3D">two model objects are equal</a>:</p>

<div>
  <pre>
    <code class='ruby'>test &quot;2 records with same #id equal to each others.&quot; do
  c1 = Comment.create
  c2 = Comment.find(c1.id)

  assert c1 == c2
  assert c2 == c1
end</code>
  </pre>
</div>


<h2>What about new record?</h2>

<p>Basically, a new model object only equals to itself:</p>

<div>
  <pre>
    <code class='ruby'>test &quot;New record does not equal to another new record.&quot; do
  new_record = Comment.new
  another_new = Comment.new

  assert new_record == new_record
  assert another_new == another_new
  assert new_record != another_new
end</code>
  </pre>
</div>


<p>Learning to use <code>==</code> operator for checking model equality
is useful. Because now, we can start using other methods
that depend on <code>==</code> operator. For instance, <code>Array#include?</code>.</p>

<div>
  <pre>
    <code class='ruby'>test &quot;When applied in Array&quot; do
  c1 = Comment.create
  c2 = Comment.find(c1.id)

  assert [c1].include? c2
  assert [c2].include? c1
  assert [c1, c2] == [c1, c2]
end</code>
  </pre>
</div>


<h2>Rails learning tests</h2>

<p>You may notice the code examples are written as tests.
This is my first <a href="https://github.com/teohm/lt_rails">Rails learning test</a>.
So the plan is to write more tests as a way to learn Rails. I will
post them here occationally if interesting enough to share.</p>

<p>Source code: <a href="https://github.com/teohm/lt_rails/blob/master/test/unit/model_equality_test.rb">model_equality_test.rb</a></p>
]]></content>
  </entry>
  
</feed>
